/*
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        List<Integer> list = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        for(int num1: nums1) {
            map.put(num1, map.getOrDefault(num1, 0) + 1);
        }
        for(int num2: nums2) {
            if(map.containsKey(num2) && map.get(num2) > 0) {
                list.add(num2);
                map.put(num2, map.get(num2) - 1);
            }
        }
        int n = list.size();
        int[] ans = new int[n];
        for(int i = 0; i < n; ++i) {
            ans[i] = list.get(i);
        }
        return ans;
    }
}
*/
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        List<Integer> list = new ArrayList<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i = 0;
        int j = 0;
        while(i < nums1.length && j < nums2.length) {
            if(nums1[i] == nums2[j]) {
                list.add(nums1[i]);
                ++i;
                ++j;
            }else if(nums1[i] < nums2[j]) {
                ++i;
            }else {
                ++j;
            }
        }
        
        int n = list.size();
        int[] ans = new int[n];
        for(int k = 0; k < n; ++k) {
            ans[k] = list.get(k);
        }
        return ans;
    }
}
