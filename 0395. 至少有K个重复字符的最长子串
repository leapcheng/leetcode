/*
解题思路：递归拆分子串，分治。先统计出每个字符出现的频次，维护一对双指针，从首尾开始统计，从首尾往中间排除，如果出现次数小于k则不可能出现在最终子串中，排除并挪动指针，然后得到临时子串，依次从头遍历，一旦发现出现频次小于k的字符，以该字符为分割线，分别递归求其最大值返回。
*/
class Solution {
    public int longestSubstring(String s, int k) {
        if(s.length() < k) {
            return 0;
        }
        if(k < 2) {
            return s.length();
        }
        return count(s.toCharArray(), 0, s.length() - 1, k); 
    }
    
    public int count(char[] s, int l, int r, int k) {
        if(r - l + 1 < k) {
            return 0;
        }
        int[] a = new int[26];
        for(int i = l; i <= r; ++i) {
            ++a[s[i] - 'a'];
        }
        while(r - l + 1 >= k && a[s[l] - 'a'] < k) {
            ++l;
        }
        while(r - l + 1 >= k && a[s[r] - 'a'] < k) {
            --r;
        }
        if(r - l + 1 < k) {
            return 0;
        }
        for(int i = l; i <= r; ++i) {
            if(a[s[i] - 'a'] < k) {
                return Math.max(count(s, l, i - 1, k), count(s, i + 1, r, k));
            }
        }
        return r - l + 1;
    }
}
