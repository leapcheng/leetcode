//O(NlogN)
class Solution {
    public int lengthOfLIS(int[] nums) {
        int maxL = 0;
        int[] dp = new int[nums.length];
        for(int num: nums) {
            int l = 0, r = maxL;
            while(l < r) {
                int m = l + (r -l) / 2;
                if(dp[m] < num) { //当写成dp[m] <= num时，表示不用严格递增，大于等于就行
                    l = m + 1;
                }else{
                    r = m;
                }
            }
            dp[l] = num;
            if(l == maxL) {
                ++maxL;   
            }
        }
        return maxL;
    }
}


/*
//O(N * N) 
class Solution {
    public int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length];
        int max = 0;
        for(int i = 0; i < nums.length; ++i) {
            dp[i] = 1;
            for(int j = 0; j < i; ++j) {
                if(nums[j] < nums[i] && dp[j] + 1 > dp[i]) {
                    dp[i] = dp[j] + 1;
                }
            }
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}
*/
